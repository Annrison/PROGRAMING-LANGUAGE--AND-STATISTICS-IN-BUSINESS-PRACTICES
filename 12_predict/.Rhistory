# Formating Codes.  Do not change the codes in this chunk !!
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8)
options(scipen=20, digits=5, width=80)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(caTools, ggplot2, dplyr)
D = read.csv("data/quality.csv")  # Read in dataset
set.seed(88)
split = sample.split(D$PoorCare, SplitRatio = 0.75)  # split vector
TR = subset(D, split == TRUE)
TS = subset(D, split == FALSE)
glm1 = glm(PoorCare ~ OfficeVisits + Narcotics, TR, family=binomial)
summary(glm1)
pred = predict(glm1, D, type="response")
y = D$PoorCare
data.frame(pred, y) %>%
ggplot(aes(x=pred, fill=factor(y))) +
geom_histogram(bins=20, col='white', position="stack", alpha=0.5) +
ggtitle("Distribution of Predicted Probability (DPP,FULL)") +
xlab("predicted probability")
#先寫一個混淆矩陣
payoff = matrix(c(0,-100,-10,-50),2,2)
rownames(payoff) = c("FALSE","TRUE")
colnames(payoff) = c("NoAct","Act")
payoff
#t值從0到1，每0.1切開一次
cutoff = seq(0, 1, 0.01)
#算出報酬
result = sapply(cutoff, function(p) {
cm = table(factor(y==1, c(F,T)), factor(pred>p, c(F,T)))
sum(cm * payoff) # sum of confusion * payoff matrix
})
i = which.max(result)
# 把cutoff的結果畫出來
par(cex=0.7, mar=c(4,4,3,1))
plot(cutoff, result, type='l', col='cyan', lwd=2, main=sprintf(
"Optomal Expected Result: $%d @ %.2f",result[i],cutoff[i]))
abline(v=seq(0,1,0.1),h=seq(-6000,0,100),col='lightgray',lty=3)
points(cutoff[i], result[i], pch=20, col='red', cex=2)
library(manipulate)
manipulate({
payoff = matrix(c(TN,FN,FP,TP),2,2)
cutoff = seq(0, 1, 0.01)
result = sapply(cutoff, function(p) {
cm = table(factor(y==1, c(F,T)), factor(pred>p, c(F,T)))
sum(cm * payoff) # sum of confusion * payoff matrix
})
i = which.max(result)
par(cex=0.7)
plot(cutoff, result, type='l', col='cyan', lwd=2, main=sprintf(
"Optomal Expected Result: $%d @ %.2f",result[i],cutoff[i]))
abline(v=seq(0,1,0.1),h=seq(-10000,0,100),col='lightgray',lty=3)
points(cutoff[i], result[i], pch=20, col='red', cex=2)
},
TN = slider(-100,0,   0,step=5),
FN = slider(-100,0,-100,step=5),
FP = slider(-100,0, -10,step=5),
TP = slider(-100,0, -50,step=5)
)
library(manipulate)
manipulate({
payoff = matrix(c(TN,FN,FP,TP),2,2)
cutoff = seq(0, 1, 0.01)
result = sapply(cutoff, function(p) {
cm = table(factor(y==1, c(F,T)), factor(pred>p, c(F,T)))
sum(cm * payoff) # sum of confusion * payoff matrix
})
i = which.max(result)
par(cex=0.7)
plot(cutoff, result, type='l', col='cyan', lwd=2, main=sprintf(
"Optomal Expected Result: $%d @ %.2f",result[i],cutoff[i]))
abline(v=seq(0,1,0.1),h=seq(-10000,0,100),col='lightgray',lty=3)
points(cutoff[i], result[i], pch=20, col='red', cex=2)
},
TN = slider(-100,0,   0,step=5),
FN = slider(-100,0,-100,step=5),
FP = slider(-100,0, -10,step=5),
TP = slider(-100,0, -50,step=5)
)
