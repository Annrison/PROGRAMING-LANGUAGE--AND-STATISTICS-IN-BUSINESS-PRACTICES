# Formating Codes.  Do not change the codes in this chunk.<br>
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8)
options(scipen=20, digits=5, width=80)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, car, vcd, GGally, mvtnorm)
W = read.csv('data/wholesales.csv')
W$Channel = factor( paste0("Ch",W$Channel) )
W$Region = factor( paste0("Reg",W$Region) )
W[3:8] = lapply(W[3:8], log, base=10)
summary(W)
par(cex=0.7, mar=c(4,4,2,2))
plot(W$Milk, W$Grocery)
ggplot(W, aes(x=Milk, y=Grocery)) +
geom_point(alpha=0.3) +
geom_smooth(method="lm")
cor(W$Milk, W$Grocery)
cor.test(W$Milk, W$Grocery)
par(cex=0.7, mar=c(1,1,1,1), mfrow=c(3,3))
for(r in seq(-1,1,0.25)) {
mu = c(0,0)
sigma = matrix(c(1,r,r,1),nrow=2)   # covariance matrix
rmvnorm(500, mu, sigma) %>% plot(col='gray')
text(0,0,r,cex=3,col='blue',font=2)
}
cor(W[,3:8]) %>% round(3)
car::scatterplotMatrix(W[,3:8])
table(W$Channel, W$Region) %>% chisq.test()
library(vcd)
structable(Channel ~ Region, W) %>%
mosaic(shade=T, labeling=labeling_residuals)
haireye <- margin.table(HairEyeColor, 1:2)
haireye
(mpHair = rowSums(haireye)/sum(haireye)) # marginal prob.
(mpEye = colSums(haireye)/sum(haireye)) # marginal prob.
(expProb = mpHair %o% mpEye)
sum(expProb)
(expVal = expProb * sum(haireye))
haireye <- margin.table(HairEyeColor, 1:2)
haireye
(mpHair = rowSums(haireye)/sum(haireye)) # marginal prob.
(mpEye = colSums(haireye)/sum(haireye)) # marginal prob.
(expProb = mpHair %o% mpEye)
sum(expProb)
(expVal = expProb * sum(haireye))
(s.res = (haireye - expVal) / sqrt(expVal))
mosaic(haireye, shade=T, labeling=labeling_residuals)
( expected = independence_table(haireye) )
(rowSums(haireye) %o% colSums(haireye)) / sum(haireye)
( residuals = haireye - expected )
( std.residuals = residuals / sqrt(expected)  )
library(GGally)
ggpairs(iris, aes(colour = Species, alpha=0.4),
lower=list(combo = wrap("facethist", binwidth = 0.2)))
par(cex=0.8, mar=c(2,3,1,1), mfrow=c(1,1))
table(W$Channel) %>% barplot
par(cex=0.8, mar=c(4,3,1,1))
hist(W$Fresh)
# Formating Codes.  Do not change the codes in this chunk.<br>
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8)
options(scipen=20, digits=5, width=80)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, plotly, ggpubr)
W = read.csv('data/wholesales.csv')
W$Channel = factor( paste0("Ch",W$Channel) )
W$Region = factor( paste0("Reg",W$Region) )
W[3:8] = lapply(W[3:8], log, base=10)
y = W$Milk
x = W$Grocery
b0 = md$coef[1]
# Formating Codes.  Do not change the codes in this chunk.<br>
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8)
options(scipen=20, digits=5, width=80)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, plotly, ggpubr)
W = read.csv('data/wholesales.csv')
W$Channel = factor( paste0("Ch",W$Channel) )
W$Region = factor( paste0("Reg",W$Region) )
W[3:8] = lapply(W[3:8], log, base=10)
#       y      x
md = lm(Milk ~ Grocery, W)
names(md)
y = W$Milk
x = W$Grocery
b0 = md$coef[1]
b1 = md$coef[2]
yhat = b0 + b1 * x
er = y - yhat
range(yhat - md$fitted.values)
range(er - md$residuals)
par(cex=0.8, mar=c(4,4,1,1))
plot(W$Grocery, W$Milk, pch=20, col="#80808080")
abline(b0, b1, col='red')
ggplot(aes(Grocery, Milk), data=W) +
geom_point(alpha=0.4, size=0.8) +
geom_smooth(method="lm", level=0.95, col="red", lwd=0.2) -> p
ggplotly(p)
summary(md)
SST = sum( (y - mean(y))^2 )            # Total Sum of Sq.
SSE = sum( (y - md$fitted.values)^2 )   # Error Sum of Sq.
SSR = SST - SSE                         # Regression Sum of sql
R2 = SSR/SST    # The Propotion of Variance explained by Regressor
c(SST=SST, SSE=SSE, SSR=SSR, R2=R2)
cor(md$fitted.values, md$residuals)
lm(Grocery ~ Region, W) %>% summary
aov(Grocery ~ Region, data = W) %>% summary
df = ToothGrowth
head(df)
compare <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
ggboxplot(
df, x = "dose", y = "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose") +
stat_compare_means(comparisons = compare) +
stat_compare_means(label.y = 50)
curve(dnorm(x, 0.7352, 0.0301), -0.1, 1, n=400, xlab=bquote(italic(b[1])),
main=bquote("The Distribution of Random Variable: " ~ italic(b[1])))
abline(v=qnorm(c(0.025, 0.975),0.7352, 0.0301), col="red")
# 這些程式碼設定網頁的格式，並安裝、載入一些基本的套件，請大家不要去改動<br>
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8)
options(scipen=20, digits=5, width=80)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr,d3heatmap, googleVis,FactoMineR, factoextra, dendextend)
load("data/olist.rdata")
View(I)
I = left_join(O[,1:2], C[,c(1,5)])[-2] %>%   # merge state into `O`
rename(state=customer_state) %>%           # use a shoter name
right_join(I)
I = left_join(P, TPC)[,c(1,10)] %>%                     # merge`P`和`TPC`
rename(category = product_category_name_english) %>%  # 換成英文名字
right_join(I) %>% data.frame                          # 和`I`merge
# 算出商品類別和州的對應矩陣
X = xtabs(price ~ state + category, I)    # 把 price依據類別、州加起來
X = X[order(-rowSums(X)),]                # rows 降冪排列
X = X[,order(-colSums(X))]                # columns 降冪排列
X = as(X[1:15, 1:32], "matrix")        # 保留 15 個州 & 32 個類別
colnames(X) = substr(colnames(X),1,12) # 只取名字前幾個字
X_new = X[,1:15] %>% as.matrix %>% {./rowSums(.)} #轉成各州的比例
#rowSums(E_new) #檢查是不是比例相加為1
X_new = as.data.frame(X_new)
state <- data.frame(rownames(X_new))
X_new = cbind(X_new,state)
rownames(X_new) <- 1:nrow(X_new)
X_hc = X_new[,1:13]  %>% scale  %>% dist  %>% hclust #產出的hc是一棵樹
X_new$group = cutree(X_hc, k=5) %>% factor
table(X_new$group) #看每一群分了幾個
X_new
covid19_US = read_csv("D:/coding_resource/fourth_grade/data mining/miduan_project/data/covid19-state-data/COVID19_state.csv")
View(covid19_US)
covid19_US$death_rate = covid19_US$Deaths/covid19_US$Tested
covid19_US$Infected_rate = covid19_US$Infected/covid19_US$Tested
#測試死亡率(醫療資源好不好)
covid19_US$death_rate = covid19_US$Deaths/covid19_US$Tested
#測試染病率(病毒密度)
covid19_US$Infected_rate = covid19_US$Infected/covid19_US$Tested
#平均染病率(一州有多少人會染病)
covid19_US$Infected_rate = covid19_US$Infected/covid19_US$Population
#測試死亡率(醫療資源好不好)
covid19_US$death_rate = covid19_US$Deaths/covid19_US$Tested
#測試染病率(病毒密度)
covid19_US$Infected_rate = covid19_US$Infected/covid19_US$Tested
#平均染病率(一州有多少人會染病)
covid19_US$Infected_rate_pop = covid19_US$Infected/covid19_US$Population
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US)
summary(md_Infected_rate_pop)
covid19_US
covid19_US[,1]
covid19_US
covid19_US[,5:25]
covid19_US[,6:25]
covid19_US$`Med-Large Airports` = covid19_US$`Med-Large Airports`/covid19_US$Population
covid19_US$`Med-Large Airports`
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US[6:25])
covid19_US = read_csv("D:/coding_resource/fourth_grade/data mining/miduan_project/data/covid19-state-data/COVID19_state.csv")
#測試死亡率(醫療資源好不好)
covid19_US$death_rate = covid19_US$Deaths/covid19_US$Tested
#測試染病率(病毒密度)
covid19_US$Infected_rate = covid19_US$Infected/covid19_US$Tested
#平均染病率(一州有多少人會染病)
covid19_US$Infected_rate_pop = covid19_US$Infected/covid19_US$Population
#平均每人醫療資源
covid19_US$Hospitals = covid19_US$Hospitals/covid19_US$Population
#平均機場數量
covid19_US$`Med-Large Airports` = covid19_US$`Med-Large Airports`/covid19_US$Population
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US[6:25])
md_Infected_rate_pop = lm(Infected_rate ~ covid19_US[6:25], covid19_US)
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US_select)
covid19_US_select = covid19_US[,6:25]
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US_select)
covid19_US_select = covid19_US[,6:26]
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US_select)
covid19_US_select = covid19_US[,6:29]
md_Infected_rate_pop = lm(Infected_rate ~ ., covid19_US_select)
summary(md_Infected_rate_pop)
md_Infected_rate_pop = lm(death_rate ~ ., covid19_US_select)
md_Infected_death = lm(death_rate ~ ., covid19_US_select)
summary(md_Infected_death)
md_Infected_death = lm(Infected_rate ~ ., covid19_US_select)
summary(md_Infected_death)
md_Infected_death = lm(Infected_rate_pop ~ ., covid19_US_select)
summary(md_Infected_death)
md_Infected_Infected_rate_pop = lm(Infected_rate_pop ~ ., covid19_US_select)
summary(md_Infected_Infected_rate_pop)
